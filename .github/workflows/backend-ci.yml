name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    name: Test Backend Core Functionality
    runs-on: ubuntu-latest

    # Note: MySQL service disabled since we're only running unit/contract tests
    # Integration tests require full Docker setup and should be run locally
    # services:
    #   mysql:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: root_password
    #       MYSQL_DATABASE: clash_deck_builder_test
    #       MYSQL_USER: clash_user
    #       MYSQL_PASSWORD: test_password
    #     ports:
    #       - 3306:3306
    #     options: >-
    #       --health-cmd="mysqladmin ping -h localhost"
    #       --health-interval=10s
    #       --health-timeout=5s
    #       --health-retries=5

    env:
      JWT_SECRET_KEY: test-secret-key-for-ci-minimum-32-characters-long
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 15
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
      GOOGLE_CLIENT_ID: test-client-id
      GOOGLE_CLIENT_SECRET: test-client-secret
      CORS_ORIGINS: http://localhost:3000
      ENVIRONMENT: test
      DEBUG: false
      LOG_LEVEL: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify UV installation
        run: uv --version

      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync

      # Database setup steps removed - only needed for integration tests
      # - name: Wait for MySQL
      # - name: Set up test database schema

      - name: Run unit tests
        working-directory: backend
        run: |
          uv run pytest tests/unit/ -v --tb=short

      - name: Run contract tests
        working-directory: backend
        run: |
          uv run pytest tests/contract/ -v --tb=short

      # Skip integration tests in CI - they require full database setup with Docker
      # Integration tests should be run locally with: docker-compose -f docker-compose.test.yml up -d
      # - name: Run core integration tests
      #   working-directory: backend
      #   run: |
      #     uv run pytest tests/integration/test_database_connection.py -v --tb=short
      #     uv run pytest tests/integration/test_card_database.py -v --tb=short
      #     uv run pytest tests/integration/test_deck_operations.py -v --tb=short

      - name: Generate test report
        if: always()
        working-directory: backend
        run: |
          uv run pytest tests/unit/ tests/contract/ --tb=short --junit-xml=test-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: backend/test-results.xml
          retention-days: 30
